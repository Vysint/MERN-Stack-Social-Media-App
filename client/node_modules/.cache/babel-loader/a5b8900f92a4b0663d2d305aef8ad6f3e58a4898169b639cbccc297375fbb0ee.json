{"ast":null,"code":"import * as e from \"react\";\nexport function useDirection(t, n) {\n  const [r, o] = e.useState(\"ltr\"),\n    [i, u] = e.useState(),\n    c = e.useRef(0);\n  return e.useEffect(() => {\n    if (void 0 === n && null != t && t.parentElement) {\n      const e = getComputedStyle(t.parentElement);\n      u(e);\n    }\n  }, [t, n]), e.useEffect(() => (void 0 === n && function e() {\n    c.current = requestAnimationFrame(() => {\n      const t = null == i ? void 0 : i.direction;\n      t && o(t), e();\n    });\n  }(), () => cancelAnimationFrame(c.current)), [i, n, o]), n || r;\n}","map":{"version":3,"mappings":";OAIO,SAASA,aAAaC,GAA6BC;EACxD,OAAOC,GAAWC,KAAgBC,EAAMC,SAAoB;IAAA,CACrDC,GAAeC,KAAoBH,EAAMC;IAC1CG,IAASJ,EAAMK,OAAe;EA0BpC,OAxBAL,EAAMM,UAAU;IAKd,SAAsBC,MAAlBV,aAA+BD,OAASY,eAAe;MACzD,MAAMN,IAAgBO,iBAAiBb,EAAQY;MAC/CL,EAAiBD;IAAAA;EAAAA,GAElB,CAACN,GAASC,KAEbG,EAAMM,UAAU,YASQC,MAAlBV,KARJ,SAASa;IACPN,EAAOO,UAAUC,sBAAsB;MACrC,MAAMC,IAAMX,iBAAH,IAAGA,EAAeJ;MACvBe,KAAKd,EAAac,IACtBH;IAAAA;EAAAA,CAI6BA,IAC1B,MAAMI,qBAAqBV,EAAOO,WACxC,CAACT,GAAeL,GAAeE,KAE3BF,KAAiBC;AAAAA","names":["useDirection","element","directionProp","direction","setDirection","React","useState","computedStyle","setComputedStyle","rAFRef","useRef","useEffect","undefined","parentElement","getComputedStyle","getDirection","current","requestAnimationFrame","dir","cancelAnimationFrame"],"sources":["/Users/vincentlangat/Desktop/React-Projects/day19-social-media-app/node_modules/@radix-ui/react-use-direction/dist/packages/react/use-direction/src/useDirection.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Direction = 'ltr' | 'rtl';\n\nexport function useDirection(element: HTMLElement | null, directionProp?: Direction) {\n  const [direction, setDirection] = React.useState<Direction>('ltr');\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const rAFRef = React.useRef<number>(0);\n\n  React.useEffect(() => {\n    // We check inherited direction of the parent instead of the `element` itself.\n    // This is because we internally set the computed `dir` on the element so wouldn't be\n    // able to react to changes to the inherited direction. The `dir` attribute we set should\n    // always sync with the direction prop OR its inherited direction.\n    if (directionProp === undefined && element?.parentElement) {\n      const computedStyle = getComputedStyle(element.parentElement);\n      setComputedStyle(computedStyle);\n    }\n  }, [element, directionProp]);\n\n  React.useEffect(() => {\n    function getDirection() {\n      rAFRef.current = requestAnimationFrame(() => {\n        const dir = computedStyle?.direction as Direction | '' | undefined;\n        if (dir) setDirection(dir);\n        getDirection();\n      });\n    }\n\n    if (directionProp === undefined) getDirection();\n    return () => cancelAnimationFrame(rAFRef.current);\n  }, [computedStyle, directionProp, setDirection]);\n\n  return directionProp || direction;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}