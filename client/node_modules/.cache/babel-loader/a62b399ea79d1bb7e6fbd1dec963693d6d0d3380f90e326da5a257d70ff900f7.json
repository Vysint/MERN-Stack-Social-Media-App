{"ast":null,"code":"import { useLayoutEffect as e } from \"@radix-ui/react-use-layout-effect\";\nimport { useComposedRefs as n } from \"@radix-ui/react-compose-refs\";\nimport * as t from \"react\";\nexport const Presence = u => {\n  const {\n      present: o,\n      children: i\n    } = u,\n    s = function (n) {\n      const [u, o] = t.useState(),\n        i = t.useRef({}),\n        s = t.useRef(n),\n        c = t.useRef(\"none\"),\n        a = n ? \"mounted\" : \"unmounted\",\n        [d, m] = function (e, n) {\n          return t.useReducer((e, t) => {\n            const r = n[e][t];\n            return null != r ? r : e;\n          }, e);\n        }(a, {\n          mounted: {\n            UNMOUNT: \"unmounted\",\n            ANIMATION_OUT: \"unmountSuspended\"\n          },\n          unmountSuspended: {\n            MOUNT: \"mounted\",\n            ANIMATION_END: \"unmounted\"\n          },\n          unmounted: {\n            MOUNT: \"mounted\"\n          }\n        });\n      return t.useEffect(() => {\n        const e = r(i.current);\n        c.current = \"mounted\" === d ? e : \"none\";\n      }, [d]), e(() => {\n        const e = i.current,\n          t = s.current;\n        if (t !== n) {\n          const u = c.current,\n            o = r(e);\n          if (n) m(\"MOUNT\");else if (\"none\" === o || \"none\" === (null == e ? void 0 : e.display)) m(\"UNMOUNT\");else {\n            const e = u !== o;\n            m(t && e ? \"ANIMATION_OUT\" : \"UNMOUNT\");\n          }\n          s.current = n;\n        }\n      }, [n, m]), e(() => {\n        if (u) {\n          const e = e => {\n              const n = r(i.current).includes(e.animationName);\n              e.target === u && n && m(\"ANIMATION_END\");\n            },\n            n = e => {\n              e.target === u && (c.current = r(i.current));\n            };\n          return u.addEventListener(\"animationstart\", n), u.addEventListener(\"animationcancel\", e), u.addEventListener(\"animationend\", e), () => {\n            u.removeEventListener(\"animationstart\", n), u.removeEventListener(\"animationcancel\", e), u.removeEventListener(\"animationend\", e);\n          };\n        }\n        m(\"ANIMATION_END\");\n      }, [u, m]), {\n        isPresent: [\"mounted\", \"unmountSuspended\"].includes(d),\n        ref: t.useCallback(e => {\n          e && (i.current = getComputedStyle(e)), o(e);\n        }, [])\n      };\n    }(o),\n    c = \"function\" == typeof i ? i({\n      present: s.isPresent\n    }) : t.Children.only(i),\n    a = n(s.ref, c.ref);\n  return \"function\" == typeof i || s.isPresent ? /*#__PURE__*/t.cloneElement(c, {\n    ref: a\n  }) : null;\n};\nfunction r(e) {\n  return (null == e ? void 0 : e.animationName) || \"none\";\n}\nPresence.displayName = \"Presence\";","map":{"version":3,"mappings":";;;OAUA,MAAMA,WAAqCC;EACzC;MAAMC,SAAEA;MAAFC,UAAWA;IAAAA,IAAaF;IACxBG,IAmBR,UAAqBF;MACnB,OAAOG,GAAMC,KAAWC,EAAMC;QACxBC,IAAYF,EAAMG,OAA4B;QAC9CC,IAAiBJ,EAAMG,OAAOR;QAC9BU,IAAuBL,EAAMG,OAAe;QAC5CG,IAAeX,IAAU,YAAY;QAAA,CACpCY,GAAOC,KC1BT,UACLF,GACAG;UAEA,OAAOT,EAAMU,WAAW,CAACH,GAAwBI;YAC/C,MAAMC,IAAaH,EAAQF,GAAeI;YAC1C,OAAOC,gBAAaL;UAAAA,GACnBD;QAAAA,CDmBmBO,CAAgBP,GAAc;UAClDQ,SAAS;YACPC,SAAS;YACTC,eAAe;UAAA;UAEjBC,kBAAkB;YAChBC,OAAO;YACPC,eAAe;UAAA;UAEjBC,WAAW;YACTF,OAAO;UAAA;QAAA;MA+EX,OA3EAlB,EAAMqB,UAAU;QACd,MAAMC,IAAuBC,EAAiBrB,EAAUsB;QACxDnB,EAAqBmB,UAAoB,cAAVjB,IAAsBe,IAAuB;MAAA,GAC3E,CAACf,KAEJkB,EAAgB;QACd,MAAMC,IAASxB,EAAUsB;UACnBG,IAAavB,EAAeoB;QAGlC,IAF0BG,MAAehC,GAElB;UACrB,MAAMiC,IAAoBvB,EAAqBmB;YACzCF,IAAuBC,EAAiBG;UAE9C,IAAI/B,GACFa,EAAK,cACA,IAA6B,WAAzBc,KAAuD,YAApBI,uBAAQG,UAGpDrB,EAAK,gBACA;YAOL,MAAMsB,IAAcF,MAAsBN;YAGxCd,EADEmB,KAAcG,IACX,kBAEA;UAAA;UAIT1B,EAAeoB,UAAU7B;QAAAA;MAAAA,GAE1B,CAACA,GAASa,KAEbiB,EAAgB;QACd,IAAI3B,GAAM;UAMR,MAAMiC,IAAsBpB;cAC1B,MACMqB,IADuBT,EAAiBrB,EAAUsB,SACRS,SAAStB,EAAMuB;cAC3DvB,EAAMwB,WAAWrC,KAAQkC,KAC3BxB,EAAK;YAAA;YAGH4B,IAAwBzB;cACxBA,EAAMwB,WAAWrC,MAEnBO,EAAqBmB,UAAUD,EAAiBrB,EAAUsB;YAAAA;UAM9D,OAHA1B,EAAKuC,iBAAiB,kBAAkBD,IACxCtC,EAAKuC,iBAAiB,mBAAmBN,IACzCjC,EAAKuC,iBAAiB,gBAAgBN,IAC/B;YACLjC,EAAKwC,oBAAoB,kBAAkBF,IAC3CtC,EAAKwC,oBAAoB,mBAAmBP,IAC5CjC,EAAKwC,oBAAoB,gBAAgBP;UAAAA;QAAAA;QAK3CvB,EAAK;MAAA,GAEN,CAACV,GAAMU,KAEH;QACL+B,WAAW,CAAC,WAAW,oBAAoBN,SAAS1B;QACpDiC,KAAKxC,EAAMyC,YAAa3C;UAClBA,MAAMI,EAAUsB,UAAUkB,iBAAiB5C,KAC/CC,EAAQD;QAAAA,GACP;MAAA;IAAA,CAvHY6C,CAAYhD;IAEvBiD,IACgB,qBAAbhD,IACHA,EAAS;MAAED,SAASE,EAAS0C;IAAAA,KAC7BvC,EAAM6C,SAASC,KAAKlD;IAGpB4C,IAAMO,EAAgBlD,EAAS2C,KAAMI,EAAcJ;EAEzD,OADuC,qBAAb5C,KACLC,EAAS0C,yBAAYvC,EAAMgD,aAAaJ,GAAO;IAAEJ;EAAAA,KAAS;AAAA;AAmHjF,SAASjB,EAAiBG;EACxB,QAAOA,uBAAQQ,kBAAiB;AAAA;AAjHlCzC,SAASwD,cAAc","names":["Presence","props","present","children","presence","node","setNode","React","useState","stylesRef","useRef","prevPresentRef","prevAnimationNameRef","initialState","state","send","machine","useReducer","event","nextState","$d88c0747af12355025ed3195fb48c68a$export$useStateMachine","mounted","UNMOUNT","ANIMATION_OUT","unmountSuspended","MOUNT","ANIMATION_END","unmounted","useEffect","currentAnimationName","getAnimationName","current","useLayoutEffect","styles","wasPresent","prevAnimationName","display","isAnimating","handleAnimationEnd","isCurrentAnimation","includes","animationName","target","handleAnimationStart","addEventListener","removeEventListener","isPresent","ref","useCallback","getComputedStyle","usePresence","child","Children","only","useComposedRefs","cloneElement","displayName"],"sources":["/Users/vincentlangat/Desktop/React-Projects/day19-social-media-app/node_modules/@radix-ui/react-presence/dist/packages/react/presence/src/Presence.tsx","/Users/vincentlangat/Desktop/React-Projects/day19-social-media-app/node_modules/@radix-ui/react-presence/dist/packages/react/presence/src/useStateMachine.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useStateMachine } from './useStateMachine';\n\ninterface PresenceProps {\n  present: boolean;\n  children: React.ReactElement | ((props: { present: boolean }) => React.ReactElement);\n}\n\nconst Presence: React.FC<PresenceProps> = (props) => {\n  const { present, children } = props;\n  const presence = usePresence(present);\n\n  const child = (\n    typeof children === 'function'\n      ? children({ present: presence.isPresent })\n      : React.Children.only(children)\n  ) as React.ReactElement;\n\n  const ref = useComposedRefs(presence.ref, (child as any).ref);\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? React.cloneElement(child, { ref }) : null;\n};\n\nPresence.displayName = 'Presence';\n\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\n\nfunction usePresence(present: boolean) {\n  const [node, setNode] = React.useState<HTMLElement>();\n  const stylesRef = React.useRef<CSSStyleDeclaration>({} as any);\n  const prevPresentRef = React.useRef(present);\n  const prevAnimationNameRef = React.useRef<string>('none');\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = useStateMachine(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended',\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted',\n    },\n    unmounted: {\n      MOUNT: 'mounted',\n    },\n  });\n\n  React.useEffect(() => {\n    const currentAnimationName = getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n\n  useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = getAnimationName(styles);\n\n      if (present) {\n        send('MOUNT');\n      } else if (currentAnimationName === 'none' || styles?.display === 'none') {\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');\n      } else {\n        /**\n         * When `present` changes to `false`, we check changes to animation-name to\n         * determine whether an animation has started. We chose this approach (reading\n         * computed styles) because there is no `animationrun` event and `animationstart`\n         * fires after `animation-delay` has expired which would be too late.\n         */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n\n        if (wasPresent && isAnimating) {\n          send('ANIMATION_OUT');\n        } else {\n          send('UNMOUNT');\n        }\n      }\n\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n\n  useLayoutEffect(() => {\n    if (node) {\n      /**\n       * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n       * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n       * make sure we only trigger ANIMATION_END for the currently active animation.\n       */\n      const handleAnimationEnd = (event: AnimationEvent) => {\n        const currentAnimationName = getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node && isCurrentAnimation) {\n          send('ANIMATION_END');\n        }\n      };\n      const handleAnimationStart = (event: AnimationEvent) => {\n        if (event.target === node) {\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n        }\n      };\n      node.addEventListener('animationstart', handleAnimationStart);\n      node.addEventListener('animationcancel', handleAnimationEnd);\n      node.addEventListener('animationend', handleAnimationEnd);\n      return () => {\n        node.removeEventListener('animationstart', handleAnimationStart);\n        node.removeEventListener('animationcancel', handleAnimationEnd);\n        node.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else {\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n    }\n  }, [node, send]);\n\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: React.useCallback((node: HTMLElement) => {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, []),\n  };\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getAnimationName(styles?: CSSStyleDeclaration) {\n  return styles?.animationName || 'none';\n}\n\nexport { Presence };\nexport type { PresenceProps };\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}